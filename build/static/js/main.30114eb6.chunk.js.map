{"version":3,"sources":["friends.js","cards.js","cardList.js","SearchBox.js","app.js","serviceWorker.js","index.js"],"names":["Friends","id","name","email","Card","props","className","alt","src","CardList","CardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredFriends","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMA6EeA,EA7ED,CACb,CACCC,GAAG,EACJC,KAAK,iBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,kBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,iBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,cACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,kBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,kBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,mBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,iBACLC,MAAO,iBAGP,CACCF,GAAG,EACJC,KAAK,iBACLC,MAAO,iBAGP,CACCF,GAAG,GACJC,KAAK,cACLC,MAAO,iBAGP,CACCF,GAAG,GACJC,KAAK,aACLC,MAAO,iBAGP,CACCF,GAAG,GACJC,KAAK,gBACLC,MAAO,kBCnDOC,EAjBH,SAACC,GACZ,OACC,yBAAKC,UAAW,sDAChB,yBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAAMJ,GAAhC,cACrB,6BACA,gCAAMI,EAAMH,KAAZ,KACA,2BAAIG,EAAMF,MAAV,QCsBYM,EA1BA,SAAC,GAAa,IAAZT,EAAW,EAAXA,QACXU,EAAcV,EAAQW,KAAI,SAACC,EAAKC,GACnC,OACH,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,GAAID,EAAQa,GAAGZ,GAAIC,KAAOF,EAAQa,GAAGX,KAAMC,MAAOH,EAAQa,GAAGV,WAKxE,OACC,6BACCO,ICEUK,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACC,yBAAKX,UAAW,gBAChB,2BAAOY,KAAK,SACZC,YAAY,gBACZC,SAAUH,MCkCGI,E,kDAhCb,aAAc,IAAD,8BACZ,gBAQDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,SARxC,EAAKC,MAAM,CACX3B,QAASA,EACVgB,YAAY,IAJC,E,qDAaJ,IAAD,OACDY,EAAgBC,KAAKF,MAAM3B,QAAQ8B,QAAO,SAAC9B,GAChD,OAAOA,EAAQE,KAAK6B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAGnE,OACA,yBAAKzB,UAAW,MAClB,6CACA,kBAAC,EAAD,CAAWW,aAAcY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUtB,QAAS4B,S,GAvBAK,aCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.30114eb6.chunk.js","sourcesContent":["const Friends=[\n\t{\n\t\tid:1,\n\tname:\"Meredith Grey \",\n\temail: \"mg2@gmail.com\",\n},\n\n\t{\n\t\tid:2,\n\tname:\"Christina Yang \",\n\temail: \"cy2@gmail.com\",\n},\n\n\t{\n\t\tid:3,\n\tname:\"Izzie Stevens \",\n\temail: \"is2@gmail.com\",\n},\n\n\t{\n\t\tid:4,\n\tname:\"Alex Karev \",\n\temail: \"ak2@gmail.com\",\n},\n\n\t{\n\t\tid:5,\n\tname:\"Miranda Bailey \",\n\temail: \"mb2@gmail.com\",\n},\n\n\t{\n\t\tid:6,\n\tname:\"Richard Webber \",\n\temail: \"rw2@gmail.com\",\n},\n\n\t{\n\t\tid:7,\n\tname:\"Arizona Robbins \",\n\temail: \"ar2@gmail.com\",\n},\n\n\t{\n\t\tid:8,\n\tname:\"Callie Torres \",\n\temail: \"ct2@gmail.com\",\n},\n\n\t{\n\t\tid:9,\n\tname:\"Jackson Avery \",\n\temail: \"ja2@gmail.com\",\n},\n\n\t{\n\t\tid:10,\n\tname:\"Lexie Grey \",\n\temail: \"lg2@gmail.com\",\n},\n\n\t{\n\t\tid:11,\n\tname:\"Mark Sloan\",\n\temail: \"ms2@gmail.com\",\n},\n\n\t{\n\t\tid:12,\n\tname:\"Teddy Altman \",\n\temail: \"ta2@gmail.com\",\n},\n\n\n]\n\t\n\nexport default Friends \n","import React from 'react';\n\nconst Card= (props)=> {\n\treturn(\n\t\t<div className= 'bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt= \"robots\" src={`https://robohash.org/${props.id}?200*200`}/>\n\t\t\t<div>\n\t\t\t<h2> {props.name} </h2>\n\t\t\t<p>{props.email} </p>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t\n\n\n\t\t);\n}\n\nexport default Card;","import React from 'react'\nimport Friends from './friends'\nimport Card from './cards'\n\nconst CardList=({Friends})=>{\nconst CardComponent=Friends.map((user,i)=> {\n   return(\n<Card key={i} id={Friends[i].id} name= {Friends[i].name} email={Friends[i].email}/>\n\n)\n})\n   \n   return(\n   \t<div>\n   \t{CardComponent}\n   \t</div>\n   \t);\n}\n\n  \n\t\t\n\n\n\t\t\n\t\n\n\t\t\n\n\t\t\n\t\t\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange})=> {\n\treturn(\n\t\t<div className= \"pa2 ba-white\">\n\t\t<input type='search' \n\t\tplaceholder='search robots'\n\t\tonChange={searchChange}\n\t\t/> \n\n\n\t\t</div>\n\t\t\n\t\t);\n}\n\nexport default SearchBox","import React, {Component} from 'react';\nimport CardList from './cardList';\nimport Friends from './friends';\nimport SearchBox from'./SearchBox';\n\n\n\n\n class App extends Component{\n \tconstructor(){\n \t\tsuper()\n \t\tthis.state={\n \t\tFriends: Friends,\n\t\tsearchfield:''\n\n \t\t}\n \t}\n\n \tonSearchChange=(event)=>{\n \t\tthis.setState({searchfield:event.target.value})\n \t\t\n }\n \trender(){\n \t\tconst filteredFriends=this.state.Friends.filter((Friends)=>{\n \t\t\treturn Friends.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n \t\t})\n \t\t\n \t\treturn(\n \t\t<div className= 'tc'>\n\t<h1> RoboFriends </h1>\n\t<SearchBox searchChange={this.onSearchChange}/>\n<CardList Friends={filteredFriends}/>\n \n\n </div>\n \t\t);\n }\n\n \t}\n \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport'./index.css'\n\nReactDOM.render(<App/>, document.getElementById('root')\n  \n);\n\n // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}